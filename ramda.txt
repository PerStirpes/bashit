
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config()
}

if (error || response.statusCode >= 400) {
        next(error)
    }
      

https://egghead.io/lessons/javascript-ramda-filter-reject-and-partition
https://egghead.io/lessons/javascript-change-object-properties-with-ramda-lenses
https://egghead.io/lessons/javascript-pick-and-omit-properties-from-objects-using-ramda

const document_tone = {
    tones: [
      {
        score: 0.6165,
        tone_id: "sadness",
        tone_name: "Sadness"
      },
      {
        score: 0.829888,
        tone_id: "analytical",
        tone_name: "Analytical"
      }
    ],
  sentences_tone: [
    {
      sentence_id: 0,
      text: "Team, I know that times are tough!",
      tones: [
        {
          score: 0.801827,
          tone_id: "analytical",
          tone_name: "Analytical"
        }
      ]
    },
    {
      sentence_id: 1,
      text:
        "Product sales have been disappointing for the past three quarters.",
      tones: [
        {
          score: 0.771241,
          tone_id: "sadness",
          tone_name: "Sadness"
        },
        {
          score: 0.687768,
          tone_id: "analytical",
          tone_name: "Analytical"
        }
      ]
    },
    {
      sentence_id: 2,
      text:
        "We have a competitive product, but we need to do a better job of selling it!",
      tones: [
        {
          score: 0.506763,
          tone_id: "analytical",
          tone_name: "Analytical"
        }
      ]
    }
  ]
};

const getProps = R.pick(['tones'])
const getScoreAndTone = R.project(['score', 'tone_name'])
const result = getScoreAndTone(document_tone.tones)

//.map(R.pick(['score', 'tone_name']))
//R.evolve(response)


//const predicate = R.where({
  //document_tone: R.equals('tones'),
//} )


//const getResults = R.pipe(log, R.filter(predicate), R.pluck('score'))
//const result = getResults(response)

//const path = require("path");
//const favicon = require("serve-favicon");
//const logger = require("morgan");
//const cookieParser = require("cookie-parser");
//req.flash('message', 'log')
//const compression = require("compression");
//const helmet = require("helmet");
//const cors = require('cors')
//app.use(cors())
////app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger("dev"));
//app.use(cookieParser());
//app.use(express.static(path.join(__dirname, "public")));
//app.use(compression()); // Compress all routes
//app.use(express.static(path.join(__dirname, "public")));
https://github
.com/PerStirpes/book-library-express/blob/master/app.js
npm scripts: https://egghead.io/courses/how-to-use-npm-scripts-as-your-build-tool
useful Pipeline: https://egghead.io/lessons/javascript-build-a-functional-pipeline-with-ramda-js

useful Branching Logic: https://egghead.io/lessons/javascript-handle-branching-logic-with-ramda-s-conditional-functions


https://developer.ibm.com/code/technologies/artificial-intelligence/

https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth




<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Title</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <meta name="theme-color" content="#000000" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@2_up" />
        <link rel="stylesheet" href="css/normalize.css"/>
        <link rel="shortcut icon" href="images/favicon.png" />
        <link rel="stylesheet" href="css/main.css" />
    </head>
    <body>
        <header role="banner">
            <nav></nav>
        </header>
        
        <main role="main"></main>
        
        <footer></footer>
        <script src="js/app.js"></script>
    </body>
</html>
